// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String    @unique
  password         String?
  image            String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Address          Address[]
  Order            Order[]
}

model Address {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  user          User   @relation(fields: [userEmail], references: [email])
  userEmail     String
  name          String
  streetAddress String
  state         String
  city          String
  zipCode       String
}

model Product {
  // Required fields 
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  currentPrice  Float
  originalPrice Float
  brandId       String @db.ObjectId
  nicotineId    String @db.ObjectId

  flavorId       String?          @db.ObjectId
  productFlavors ProductFlavors[]
  packCount      Int?

  // Optional fields 
  eLiquidContent  String?
  batteryCapacity String?
  coil            String?
  firingMechanism String?
  type            String?
  resistance      String?
  powerRange      String?
  charging        String?
  extra           String?

  // Relations
  brand        Brand          @relation(fields: [brandId], references: [id])
  flavor       Flavor?        @relation(fields: [flavorId], references: [id])
  Nicotine     Nicotine       @relation(fields: [nicotineId], references: [id])
  images       Image[]
  productPuffs ProductPuffs[]

  // System fields
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  //new feild 
  redirectLink String?
  OrderItem    OrderItem[]
}

model ProductFlavors {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  flavorId  String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  flavor    Flavor   @relation(fields: [flavorId], references: [id])
  createdAt DateTime @default(now())

  @@unique([productId, flavorId])
}

model Puffs {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  productPuffs ProductPuffs[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// New intermediate model to handle the many-to-many relationship with description
model ProductPuffs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  puffs     Puffs    @relation(fields: [puffsId], references: [id])
  puffsId   String   @db.ObjectId
  puffDesc  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Create a compound unique constraint to prevent duplicate entries
  @@unique([productId, puffsId])
}

model Nicotine {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Flavor {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  products       Product[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductFlavors ProductFlavors[]
}

model Image {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  url           String
  position      Int?
  productId     String?      @db.ObjectId
  product       Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  BlogArticle   BlogArticle? @relation(fields: [blogArticleId], references: [id])
  blogArticleId String?      @db.ObjectId

  @@index([productId])
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  items     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  userEmail             String
  user                  User        @relation(fields: [userEmail], references: [email])
  orderItems            OrderItem[]
  isPaid                Boolean     @default(false)
  isDelivered           Boolean     @default(false)
  phone                 String      @default("")
  // Address snapshot
  shippingName          String
  shippingStreetAddress String
  shippingState         String
  shippingCity          String
  shippingZipCode       String
  totalAmount           Float // Total amount of the order plus shipping amount
  shippingAmount        String?
  Shipment              Shipment?
  shippingRateId        String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model OrderItem {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String  @db.ObjectId
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  quantity        Int
  productId       String  @db.ObjectId // Reference to original product
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  // Product snapshot at purchase time
  productSnapshot Json // Stores product data as it existed when purchased
  purchasePrice   Float // Explicitly store the price at time of purchase

  @@index([orderId])
  @@index([productId])
}

model Shipment {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  order               Order?   @relation(fields: [orderId], references: [id])
  orderId             String   @unique @db.ObjectId
  shippoShipmentId    String   @unique // ID from Shippo /shipments API
  shippoTransactionId String?
  carrier             String // e.g., "FedEx", "UPS"
  trackingNumber      String? // Tracking number after label purchase
  trackingUrl         String? // URL to track the shipment
  labelUrl            String? // URL to download the shipping label
  status              String   @default("pending") // "pending", "label_purchased", "shipped", "delivered"
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model BlogArticle {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subtitle    String   @default("")
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      Image[]
}

model Enquiry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  subject   String
  inquiry   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
